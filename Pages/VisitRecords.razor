@page "/visits"
@using CRMSystem.Models
@using CRMSystem.Services
@inject ICosmosDbService CosmosDbService
@inject IJSRuntime JSRuntime

<PageTitle>拜訪記錄管理</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="bi bi-calendar-check"></i> 拜訪記錄管理</h2>
            <p class="text-muted">管理所有客戶的拜訪記錄和追蹤事項</p>
        </div>
        <button class="btn btn-primary" @onclick="ShowAddModal">
            <i class="bi bi-plus"></i> 新增拜訪記錄
        </button>
    </div>

    <!-- 統計卡片 -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h3 class="text-primary">@totalVisits</h3>
                    <p class="text-muted mb-0">總拜訪次數</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h3 class="text-warning">@pendingFollowUps</h3>
                    <p class="text-muted mb-0">待追蹤事項</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h3 class="text-success">@thisMonthVisits</h3>
                    <p class="text-muted mb-0">本月拜訪</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h3 class="text-info">@averageRating.ToString("F1")</h3>
                    <p class="text-muted mb-0">平均評分</p>
                </div>
            </div>
        </div>
    </div>

    <!-- 篩選器 -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <label class="form-label">負責人</label>
                    <select class="form-select" @bind="selectedAssignee" @bind:after="FilterRecords">
                        <option value="">全部</option>
                        <option value="呂歡">呂歡</option>
                        <option value="孔韻昇">孔韻昇</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">拜訪方式</label>
                    <select class="form-select" @bind="selectedMethod" @bind:after="FilterRecords">
                        <option value="">全部</option>
                        <option value="面談">面談</option>
                        <option value="電話">電話</option>
                        <option value="視訊">視訊</option>
                        <option value="簡訊">簡訊</option>
                        <option value="EMAIL">EMAIL</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">追蹤狀態</label>
                    <select class="form-select" @bind="selectedStatus" @bind:after="FilterRecords">
                        <option value="">全部</option>
                        <option value="待處理">待處理</option>
                        <option value="已完成">已完成</option>
                        <option value="逾期">逾期</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">搜尋</label>
                    <input type="text" class="form-control" placeholder="搜尋客戶或內容" @bind="searchKeyword" @oninput="FilterRecords" />
                </div>
            </div>
        </div>
    </div>

    <!-- 拜訪記錄列表 -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
            <p class="mt-2">載入拜訪記錄中...</p>
        </div>
    }
    else if (filteredRecords?.Any() == true)
    {
        <div class="row">
            @foreach (var item in filteredRecords.Take(20))
            {
                <div class="col-12 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="d-flex align-items-start">
                                        <div class="me-3">
                                            <i class="@item.Record.VisitTypeIcon" style="font-size: 1.5rem; color: #007bff;"></i>
                                        </div>
                                        <div class="flex-grow-1">
                                            <h5 class="mb-1">
                                                @item.Customer.Name
                                                @if (item.Record.IsHotLead)
                                                {
                                                    <span class="badge bg-danger ms-1">🔥 熱門</span>
                                                }
                                            </h5>
                                            <p class="text-muted mb-2">
                                                <i class="bi bi-calendar3"></i> @item.Record.VisitDate.ToString("yyyy/MM/dd") @item.Record.VisitTime
                                                <span class="mx-2">|</span>
                                                <i class="bi bi-person"></i> @item.Record.Assignee
                                                <span class="mx-2">|</span>
                                                <span class="badge @item.Record.MoodColor">@item.Record.CustomerMood</span>
                                            </p>
                                            @if (!string.IsNullOrEmpty(item.Record.VisitPurpose))
                                            {
                                                <p class="mb-2"><strong>目的：</strong>@item.Record.VisitPurpose</p>
                                            }
                                            @if (!string.IsNullOrEmpty(item.Record.ConversationContent))
                                            {
                                                <p class="mb-2 text-truncate" style="max-width: 500px;">
                                                    <strong>內容：</strong>@item.Record.ConversationContent
                                                </p>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="text-end">
                                        <div class="mb-2">
                                            <span class="badge @GetStatusBadgeClass(item.Record.FollowUpStatus)">
                                                @item.Record.FollowUpStatus
                                            </span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(item.Record.CustomerFeedback))
                                        {
                                            <div class="mb-2">
                                                <span class="text-success">⭐⭐⭐⭐⭐</span>
                                            </div>
                                        }
                                        @if (item.Record.IsHotLead)
                                        {
                                            <div class="mb-2">
                                                <small class="text-muted">重要客戶：</small>
                                                <span class="badge bg-danger">🔥 熱門</span>
                                            </div>
                                        }
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="() => ViewDetails(item)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-success" @onclick="() => EditRecord(item.Record)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (filteredRecords.Count() > 20)
        {
            <div class="text-center mt-4">
                <div class="alert alert-info">
                    顯示前 20 筆記錄，共 @filteredRecords.Count() 筆。請使用篩選器縮小範圍。
                </div>
            </div>
        }
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-inbox" style="font-size: 3rem; color: #6c757d;"></i>
            <h4 class="mt-3 text-muted">沒有找到拜訪記錄</h4>
            <p class="text-muted">嘗試調整篩選條件或新增第一筆拜訪記錄</p>
        </div>
    }
</div>

@code {
    private List<Customer> customers = new();
    private List<VisitRecordWithCustomer> allRecords = new();
    private IEnumerable<VisitRecordWithCustomer> filteredRecords = new List<VisitRecordWithCustomer>();
    
    private string selectedAssignee = "";
    private string selectedMethod = "";
    private string selectedStatus = "";
    private string searchKeyword = "";
    
    private int totalVisits = 0;
    private int pendingFollowUps = 0;
    private int thisMonthVisits = 0;
    private double averageRating = 0.0;
    
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            customers = (await CosmosDbService.GetCustomersAsync()).ToList();

            // 組合拜訪記錄與客戶資料
            allRecords = customers
                .SelectMany(c => c.VisitRecords.Select(v => new VisitRecordWithCustomer 
                { 
                    Customer = c, 
                    Record = v 
                }))
                .OrderByDescending(x => x.Record.VisitDate)
                .ToList();

            // 計算統計資料
            totalVisits = allRecords.Count;
            pendingFollowUps = allRecords.Count(x => x.Record.FollowUpStatus == "待處理" || x.Record.FollowUpStatus == "逾期");
            thisMonthVisits = allRecords.Count(x => x.Record.VisitDate >= new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1));
            averageRating = allRecords.Any() ? 4.2 : 0.0; // 暫時使用固定值

            filteredRecords = allRecords;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入拜訪記錄時發生錯誤: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterRecords()
    {
        filteredRecords = allRecords.Where(record =>
            (string.IsNullOrEmpty(selectedAssignee) || record.Record.Assignee == selectedAssignee) &&
            (string.IsNullOrEmpty(selectedMethod) || record.Record.VisitType == selectedMethod) &&
            (string.IsNullOrEmpty(selectedStatus) || record.Record.FollowUpStatus == selectedStatus) &&
            (string.IsNullOrEmpty(searchKeyword) || 
             record.Customer.Name.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ||
             (!string.IsNullOrEmpty(record.Record.ConversationContent) && record.Record.ConversationContent.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase)) ||
             (!string.IsNullOrEmpty(record.Record.VisitPurpose) && record.Record.VisitPurpose.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase)))
        ).ToList();

        StateHasChanged();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "已完成" => "bg-success",
            "逾期" => "bg-danger",
            "待處理" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private async Task ViewDetails(VisitRecordWithCustomer item)
    {
        // 跳轉到客戶詳細頁面
        await JSRuntime.InvokeVoidAsync("open", $"/customers/{item.Customer.Id}", "_blank");
    }

    private void EditRecord(VisitRecord record)
    {
        // 這裡可以實現編輯功能
        Console.WriteLine($"編輯拜訪記錄: {record.Id}");
    }

    private void ShowAddModal()
    {
        // 這裡可以實現新增功能
        Console.WriteLine("顯示新增拜訪記錄模態框");
    }

    public class VisitRecordWithCustomer
    {
        public Customer Customer { get; set; } = new();
        public VisitRecord Record { get; set; } = new();
    }
}