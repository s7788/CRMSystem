@page "/customers"
@using CRMSystem.Models
@using CRMSystem.Services
@inject ICosmosDbService CosmosDbService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>客戶管理</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h3>客戶管理系統</h3>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="CreateNewCustomer">
                <i class="bi bi-person-plus"></i> 新增客戶
            </button>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="搜尋客戶姓名、電話..." @bind="searchTerm" @onkeypress="OnSearchKeyPress" />
                <button class="btn btn-outline-secondary" type="button" @onclick="SearchCustomers">
                    <i class="bi bi-search"></i> 搜尋
                </button>
                <button class="btn btn-outline-secondary" type="button" @onclick="LoadCustomers">
                    <i class="bi bi-arrow-clockwise"></i> 重新整理
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
        </div>
    }
    else if (customers?.Any() == true)
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>姓名</th>
                        <th>性別</th>
                        <th>電話</th>
                        <th>手機</th>
                        <th>職業</th>
                        <th>客戶歸屬</th>
                        <th>投資記錄數</th>
                        <th>拜訪記錄數</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in customers)
                    {
                        <tr>
                            <td>@customer.Name</td>
                            <td>@customer.Gender</td>
                            <td>@customer.Phone</td>
                            <td>@customer.Mobile</td>
                            <td>@customer.Occupation</td>
                            <td>@customer.AssignedTo</td>
                            <td>
                                <span class="badge bg-info">@customer.InvestmentRecords.Count</span>
                            </td>
                            <td>
                                <span class="badge bg-success">@customer.VisitRecords.Count</span>
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button class="btn btn-outline-primary" @onclick="() => ViewCustomer(customer.Id)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button class="btn btn-outline-warning" @onclick="() => EditCustomer(customer.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" @onclick="() => DeleteCustomer(customer.Id, customer.Name)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> 尚無客戶資料，請點擊「新增客戶」開始建立客戶檔案。
        </div>
    }
</div>

@code {
    private IEnumerable<Customer>? customers;
    private string searchTerm = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        isLoading = true;
        try
        {
            customers = await CosmosDbService.GetCustomersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入客戶資料時發生錯誤: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchCustomers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadCustomers();
            return;
        }

        isLoading = true;
        try
        {
            customers = await CosmosDbService.SearchCustomersAsync(searchTerm);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"搜尋客戶時發生錯誤: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchCustomers();
        }
    }

    private void CreateNewCustomer()
    {
        Navigation.NavigateTo("/customers/create");
    }

    private void ViewCustomer(string customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}");
    }

    private void EditCustomer(string customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}/edit");
    }

    private async Task DeleteCustomer(string customerId, string customerName)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"確定要刪除客戶 '{customerName}' 嗎？此操作無法復原。"))
        {
            try
            {
                await CosmosDbService.DeleteCustomerAsync(customerId);
                await LoadCustomers();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"刪除客戶時發生錯誤: {ex.Message}");
            }
        }
    }
}